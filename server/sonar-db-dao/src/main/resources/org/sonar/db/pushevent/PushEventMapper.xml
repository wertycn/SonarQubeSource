<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">
<mapper namespace="org.sonar.db.pushevent.PushEventMapper">

  <sql id="pushEventColumns">
    pe.uuid as uuid,
    pe.name as name,
    pe.project_uuid as projectUuid,
    pe.language,
    pe.payload as payload,
    pe.created_at as createdAt
  </sql>

  <insert id="insert" parameterType="map" useGeneratedKeys="false">
    INSERT INTO push_events (
    uuid,
    name,
    project_uuid,
    language,
    payload,
    created_at
    )
    VALUES (
    #{uuid,jdbcType=VARCHAR},
    #{name,jdbcType=VARCHAR},
    #{projectUuid,jdbcType=VARCHAR},
    #{language,jdbcType=VARCHAR},
    #{payload,jdbcType=BLOB},
    #{createdAt,jdbcType=BIGINT}
    )
  </insert>

   <select id="selectByUuid" parameterType="String" resultType="PushEvent">
    SELECT
    <include refid="pushEventColumns"/>
    FROM push_events pe
    where
    pe.uuid=#{uuid,jdbcType=VARCHAR}
  </select>

  <select id="selectChunkByProjectUuids" parameterType="map" resultType="PushEvent">
    SELECT
    <include refid="pushEventColumns"/>
    FROM push_events pe
    WHERE created_at &gt;= #{lastPullTimestamp,jdbcType=BIGINT}
    AND ( created_at &gt; #{lastPullTimestamp,jdbcType=BIGINT} OR uuid &gt; #{lastSeenUuid,jdbcType=VARCHAR} )
    AND pe.project_uuid in
    <foreach collection="projectUuids" open="(" close=")" item="uuid" separator=",">
      #{uuid,jdbcType=VARCHAR}
    </foreach>
    ORDER BY created_at, uuid
    LIMIT #{count}
  </select>

  <select id="selectChunkByProjectUuids" parameterType="map" resultType="PushEvent" databaseId="mssql">
    SELECT top (#{count,jdbcType=BIGINT})
    <include refid="pushEventColumns"/>
    FROM push_events pe
    WHERE created_at &gt;= #{lastPullTimestamp,jdbcType=BIGINT}
    AND ( created_at &gt; #{lastPullTimestamp,jdbcType=BIGINT} OR uuid &gt; #{lastSeenUuid,jdbcType=VARCHAR} )
    AND pe.project_uuid in
    <foreach collection="projectUuids" open="(" close=")" item="uuid" separator=",">
      #{uuid,jdbcType=VARCHAR}
    </foreach>
    ORDER BY created_at, uuid
  </select>

  <select id="selectChunkByProjectUuids" parameterType="map" resultType="PushEvent" databaseId="oracle">
    SELECT * FROM (SELECT
    <include refid="pushEventColumns"/>
    FROM push_events pe
    WHERE created_at &gt;= #{lastPullTimestamp,jdbcType=BIGINT}
    AND ( created_at &gt; #{lastPullTimestamp,jdbcType=BIGINT} OR uuid &gt; #{lastSeenUuid,jdbcType=VARCHAR} )
    AND pe.project_uuid in
    <foreach collection="projectUuids" open="(" close=")" item="uuid" separator=",">
      #{uuid,jdbcType=VARCHAR}
    </foreach>
    ORDER BY created_at, uuid)
    WHERE rownum &lt;= #{count,jdbcType=BIGINT}
  </select>

  <select id="selectUuidsOfExpiredEvents" parameterType="long" resultType="string">
    SELECT
    pe.uuid
    FROM push_events pe
    where
    pe.created_at &lt;= #{timestamp,jdbcType=BIGINT}
  </select>

  <delete id="deleteByUuids" parameterType="String">
    delete from push_events
    where uuid in <foreach collection="pushEventUuids" open="(" close=")" item="uuid" separator=",">#{uuid,jdbcType=VARCHAR}</foreach>
  </delete>

</mapper>
