name: build

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: 拉取代码
        uses: actions/checkout@v2
      - name: 创建JDK 11环境
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      # Runs a single command using the runners shell
      - name: gradle缓存配置
        uses: actions/cache@v2
        with:
          path: ~/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: docs模块前端缓存
        uses: actions/cache@v2
        with:
          path: /home/runner/work/sonarqube/sonarqube/server/sonar-docs/node_modules
          key: ${{ runner.os }}-sonar-docs-node-${{ hashFiles('/home/runner/work/sonarqube/sonarqube/server/sonar-docs/package.json') }}
      - name: web模块前端缓存
        uses: actions/cache@v2
        with:
          path: /home/runner/work/sonarqube/sonarqube/server/sonar-web/node_modules
          key: ${{ runner.os }}-sonar-web-node-${{ hashFiles('/home/runner/work/sonarqube/sonarqube/server/sonar-web/package.json') }}
      - name: 项目构建
        run: |
          ./gradlew build
          mkdir mybuild
          cp sonar-application/build/distributions/sonar-application-*.zip mybuild/
          version_date=`date "+%Y%m%d"`
      - name: 上传编译产物到COS
        run: |
          pwd
          ls
          echo "============="
          ls mybuild/
          build_result=`ls mybuild/`
          echo "============="
          echo "build_result is"${build_result}
          chmod 765 -R ./bin/
          ./bin/htool-cli cos --method upload --key sonarqube/${build_result} --path ./mybuild/${build_result} --sk ${{ secrets.TENCENT_COS_SK }} --ak  ${{ secrets.TENCENT_COS_AK }} --url ${{ secrets.TENCENT_COS_URL }}
          ./bin/htool-cli cos --method upload --key sonarqube/mysonar-application-latest.zip --path ./mybuild/${build_result} --sk ${{ secrets.TENCENT_COS_SK }} --ak  ${{ secrets.TENCENT_COS_AK }} --url ${{ secrets.TENCENT_COS_URL }}
#      - name: 部署服务
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.DEPLOY_HOST }}
#          username: ${{ secrets.DEPLOY_HOST_USERNAME }}
#          key: ${{ secrets.DEPLOY_HOST_SSH }}
#          port: 22
#          script: |
#            htool-cli cos --method download --key sonarqube/mysonar-application-latest.zip --path /docker/mysonar/app.jar --sk ${{ secrets.TENCENT_COS_SK }} --ak  ${{ secrets.TENCENT_COS_AK }} --url ${{ secrets.TENCENT_COS_URL }}
#            sh /docker/deploy_mysonar.sh
